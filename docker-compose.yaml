name: TravelTo

services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: qrrqrr
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY=yes
      - REDIS_DISABLE_COMMAND=FLUSHDB, FLUSHALL
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./travel-to
      dockerfile: Dockerfile
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: qrrqrr
      JAVA_TOOL_OPTIONS: >-
        -Dmanagement.metrics.enable.all=false
        -Dmanagement.default-metrics.enabled=false
        -Dio.micrometer.shaded.jcgroups.load.service=false
        -Dmanagement.metrics.binders.process.enabled=false
        -Dmanagement.metrics.binders.system.enabled=false
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    hostname: backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "4000:80"
    environment:
      - REACT_APP_API_URL=http://backend:8080

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8085:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  smtp:
    image: reachfive/fake-smtp-server:latest
    ports:
      - "1025:1025"
      - "1080:1080"

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:9090/-/healthy || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network

  influx:
    image: influxdb:1.8
    container_name: influx
    environment:
      - INFLUXDB_DB=travelToProd
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=adminadmin
    ports:
      - "8086:8086"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:8086/ping || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_healthy
      influx:
        condition: service_healthy
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana  # Docker-managed volume
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/opt/grafana/dashboards
    networks:
      - app-network
    dns:
      - 127.0.0.11
      - 8.8.8.8

volumes:
  pgadmin_data:
  postgres_data:
  grafana_data:

networks:
  app-network:
    driver: bridge